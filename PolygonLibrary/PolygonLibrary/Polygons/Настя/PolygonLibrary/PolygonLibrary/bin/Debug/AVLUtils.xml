<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AVLUtils</name>
    </assembly>
    <members>
        <member name="T:AVLUtils.AVLTree`1">
            <summary>
            The class of AVL-tree
            </summary>
            <typeparam name="TValue">Type of the value to be stored in the tree</typeparam>
        </member>
        <member name="T:AVLUtils.IAVLTree`1">
            <summary>
            Interface defining capabilities of a tree class
            </summary>
            <typeparam name="T">The type of the stored objects</typeparam>
        </member>
        <member name="T:AVLUtils.IMultiEnumerable`1">
            <summary>
            Interface that expands capabilities of an enumerable object by adding methods
            for getting reverse enumerator and cyclic enumerators (for both direct and reverse
            traversing)
            </summary>
            <typeparam name="T">The type of the stored objects</typeparam>
        </member>
        <member name="M:AVLUtils.IMultiEnumerable`1.GetEnumerator(`0)">
            <summary>
            Returns an enumerator that iterates directly through the collection put at the given value or after it 
            (if there is no such a value in the collection)
            </summary>
            <param name="v">The value the enymerator to be put on</param>
            <returns>An enumerator that can be used to iterate directly through the collection</returns>
        </member>
        <member name="M:AVLUtils.IMultiEnumerable`1.GetReverseEnumerator">
            <summary>
            Returns an enumerator that reversely iterates through the collection.
            </summary>
            <returns>An enumerator that reversely iterates through the collection</returns>
        </member>
        <member name="M:AVLUtils.IMultiEnumerable`1.GetReverseEnumerator(`0)">
            <summary>
            Returns an enumerator that iterates reversely through the collection put at the given value or before it 
            (if there is no such a value in the collection)
            </summary>
            <param name="v">The value the enymerator to be put on</param>
            <returns>An enumerator that can be used to iterate reversely through the collection</returns>
        </member>
        <member name="M:AVLUtils.IMultiEnumerable`1.GetCyclicEnumerator">
            <summary>
            Returns an enumerator that directly iterates through the collection regarding it as a cycled one
            </summary>
            <returns>An enumerator that directly iterates through the collection regarding it as a cycled one</returns>
        </member>
        <member name="M:AVLUtils.IMultiEnumerable`1.GetCyclicEnumerator(`0)">
            <summary>
            Returns an enumerator that directly iterates through the collection regarding it as a cycled one;
            initially the enumerator is put to the given value or (if it is absent) to minimal value cyclicly 
            greater than the given one
            </summary>
            <param name="v">The value the enymerator to be put on</param>
            <returns>An enumerator that directly iterates through the collection regarding it as a cycled one</returns>
        </member>
        <member name="M:AVLUtils.IMultiEnumerable`1.GetCyclicReverseEnumerator">
            <summary>
            Returns an enumerator that reversely iterates through the collection regarding it as a cycled one
            </summary>
            <returns>An enumerator that reversely iterates through the collection regarding it as a cycled one</returns>
        </member>
        <member name="M:AVLUtils.IMultiEnumerable`1.GetCyclicReverseEnumerator(`0)">
            <summary>
            Returns an enumerator that reversely iterates through the collection regarding it as a cycled one;
            initially the enumerator is put to the given value or (if it is absent) to maximal value cyclicly 
            less than the given one
            </summary>
            <param name="v">The value the enymerator to be put on</param>
            <returns>An enumerator that iterates reversely through the collection regarding it as a cycled one</returns>
        </member>
        <member name="M:AVLUtils.IAVLTree`1.Find(`0,`0@)">
            <summary>
            Get a reference to the object by its value
            </summary>
            <param name="v">The value to be found</param>
            <param name="res">Reference to the found object: the object itself if found, default value otherwise</param>
            <returns>true if the object has been found, false otherwise</returns>
        </member>
        <member name="M:AVLUtils.IAVLTree`1.Min">
            <summary>
            Take the minimal value in the tree
            </summary>
            <returns>The minmal value</returns>
        </member>
        <member name="M:AVLUtils.IAVLTree`1.Max">
            <summary>
            Take the maximal value in the tree
            </summary>
            <returns>The maximal value</returns>
        </member>
        <member name="M:AVLUtils.IAVLTree`1.Pop">
            <summary>
            Take the minimal value in the tree and remove it
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:AVLUtils.IAVLTree`1.Pop_Back">
            <summary>
            Take the maximal value in the tree and remove it
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:AVLUtils.IAVLTree`1.Next(`0,`0@)">
            <summary>
            Take the value following after the given one
            </summary>
            <param name="v">The given value</param>
            <param name="next">The next value</param>
            <returns>true, if the next value is taken successfully; 
            false, otherwise (the given value is maximal)</returns>
        </member>
        <member name="M:AVLUtils.IAVLTree`1.CyclicNext(`0,`0@)">
            <summary>
            Take the value cyclicly following after the given one
            </summary>
            <param name="v">The given value</param>
            <param name="next">The next value</param>
            <returns>true, if the next value is taken successfully; 
            false, otherwise (the given value is maximal)</returns>
        </member>
        <member name="M:AVLUtils.IAVLTree`1.Prev(`0,`0@)">
            <summary>
            Take the value previous to the given one
            </summary>
            <param name="v">The given value</param>
            <param name="prev">The previous value</param>
            <returns>true, if the previous value is taken successfully; false, otherwise</returns>
        </member>
        <member name="M:AVLUtils.IAVLTree`1.CyclicPrev(`0,`0@)">
            <summary>
            Take the value cyclicly previous to the given one
            </summary>
            <param name="v">The given value</param>
            <param name="prev">The previous value</param>
            <returns>true, if the previous value is taken successfully; false, otherwise</returns>
        </member>
        <member name="P:AVLUtils.IAVLTree`1.comparer">
            <summary>
            Comparer defining the order in the tree
            </summary>
        </member>
        <member name="P:AVLUtils.IAVLTree`1.IsEmpty">
            <summary>
            Gets a value indicating whether this tree is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AVLUtils.IAVLTree`1.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i">Index</param>
            <returns>The value with the index i</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adding a collection to the tree
            </summary>
            <param name="collection">The collection to be added</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.Add(`0)">
            <summary>
            Procedure for adding a value to the tree
            </summary>
            <param name="newVal">The value to be added</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AddIter(AVLUtils.AVLTree{`0}.AVLNode@,`0,System.Boolean@,System.Boolean@)">
            <summary>
            A subsidiary recursive function, which searches place to add the element 
            and rebalances the tree, if necessary
            </summary>
            <param name="curNode">The node where the algorithm is</param>
            <param name="newVal">The value to be added</param>
            <param name="added">Flag showing whether the element has been added</param>
            <param name="hChanged">true, if the height of the subtree grows; false, otherwise</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.ToStringIter(AVLUtils.AVLTree{`0}.AVLNode,System.String@,System.String,System.String)">
            <summary>
            An auxiliary string for converting the tree to a string. 
            Converts a subtree from a given node
            </summary>
            <param name="curNode">The _top node of the subtree</param>
            <param name="res">The string accumulated upto the current instant</param>
            <param name="prefix">The prefix of the string</param>
            <param name="addPrefix">The additional prefix of the string</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.ToString">
            <summary>
            Default tree representation - as a list of its elements
            </summary>
            <returns>The resulting string</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.ToString(System.String)">
            <summary>
            Converting the tree to a string for pretty output
            </summary>
            <param name="format">Format string: L - print the tree as a list (default), T - print as a tree </param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.GetNode(`0)">
            <summary>
            Getting node containing the given value
            </summary>
            <param name="v">The value to be found</param>
            <returns>The node where the value is located, or null if there is no such a value in the tree</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.GetParentNode(AVLUtils.AVLTree{`0}.AVLNode)">
            <summary>
            Getting node parent to the given one
            </summary>
            <param name="n">The given node</param>
            <returns>The parent node</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.GetPath(`0)">
            <summary>
            Getting path to the node containing the given value (or null, if the value is absent in the tree)
            </summary>
            <param name="v">The given value</param>
            <returns>A stack containing the path, or null</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove a set of values from the tree
            </summary>
            <param name="collection">The collection to be removed</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.Remove(`0)">
            <summary>
            Removing given value from the tree
            </summary>
            <param name="remVal">The value to be removed from the tree</param>
            <returns>true, if the value has been removed successfully; 
            false, otherwise (if the value is absent in the tree)</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.RemoveIter(AVLUtils.AVLTree{`0}.AVLNode@,`0,System.Boolean@,System.Boolean@)">
            <summary>
            Auxiliary iterative function for removing
            </summary>
            <param name="curNode">reference to the current node; can change due to rebalancing</param>
            <param name="remVal">value to be removed</param>
            <param name="removed">flag showing whether the value has been removed</param>
            <param name="hChanged">true, if the height of the subtree grows; false, otherwise</param>
            <returns>change of the height of the subtree</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.del(AVLUtils.AVLTree{`0}.AVLNode@,AVLUtils.AVLTree{`0}.AVLNode@,System.Boolean@)">
            <summary>
            Auxiliary procedure for the case when we should remove a node with two chilrden.
            It seeks for the rightmost node in the given subtree (the left subtree if the node to be deleted),
            takes it off the tree, rebalances the rest if necessary and returns the _top of the new subtree
            and the detached node (to replace the removed node by it)
            </summary>
            <param name="r">The _top of the left subtree</param>
            <param name="q">The detached node</param>
            <param name="hChanged">flag showing that the height of the left subtree has been changed</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.balance1(AVLUtils.AVLTree{`0}.AVLNode@,System.Boolean@)">
            <summary>
            An auxiliary procedure for balancing left subtree
            </summary>
            <param name="p">the _top node of the left subtree</param>
            <param name="hChanged">flag showing that the balance has been changed</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.balance2(AVLUtils.AVLTree{`0}.AVLNode@,System.Boolean@)">
            <summary>
            An auxiliary procedure for balancing right subtree
            </summary>
            <param name="p">the _top node of the right subtree</param>
            <param name="hChanged">flag showing that the balance has been changed</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection from the beginning
            </summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection form the beginning (typeless version)
            </summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.GetEnumerator(`0)">
            <summary>
            Returns an enumerator that iterates through the collection put at the given value or after it 
            (if there is no such a value in the collection)
            </summary>
            <param name="v">The value the enymerator to be put on</param>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.GetReverseEnumerator">
            <summary>
            Returns an enumerator that reversely iterates through the collection from the end
            </summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.GetReverseEnumerator(`0)">
            <summary>
            Returns an enumerator that iterates reversely through the collection put at the given value or before it 
            (if there is no such a value in the collection)
            </summary>
            <param name="v">The value the enymerator to be put on</param>
            <returns>An enumerator that can be used to iterate reversely through the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.GetCyclicEnumerator">
            <summary>
            Returns an enumerator that directly iterates through the collection regarding it as a cycled one
            </summary>
            <returns>An enumerator that directly iterates through the collection regarding it as a cycled one</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.GetCyclicEnumerator(`0)">
            <summary>
            Returns an enumerator that directly iterates through the collection regarding it as a cycled one;
            initially the enumerator is put to the given value or (if it is absent) to minimal value cyclicly 
            greater than the given one
            </summary>
            <param name="v">The value the enymerator to be put on</param>
            <returns>An enumerator that directly iterates through the collection regarding it as a cycled one</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.GetCyclicReverseEnumerator">
            <summary>
            Returns an enumerator that reversely iterates through the collection regarding it as a cycled one
            </summary>
            <returns>An enumerator that reversely iterates through the collection regarding it as a cycled one</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.GetCyclicReverseEnumerator(`0)">
            <summary>
            Returns an enumerator that reversely iterates through the collection regarding it as a cycled one;
            initially the enumerator is put to the given value or (if it is absent) to maximal value cyclicly 
            less than the given one
            </summary>
            <param name="v">The value the enymerator to be put on</param>
            <returns>An enumerator that iterates reversely through the collection regarding it as a cycled one</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins</param>
        </member>
        <member name="F:AVLUtils.AVLTree`1._top">
            <summary>
            The _top of the tree
            </summary>
        </member>
        <member name="M:AVLUtils.AVLTree`1.#ctor">
            <summary>
            Default constructor. Sets default comparer
            </summary>
        </member>
        <member name="M:AVLUtils.AVLTree`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructor, which sets the comparer for the tree
            </summary>
            <param name="newComp">The comparer should be used in the tree</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.GetByIndexIter(AVLUtils.AVLTree{`0}.AVLNode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Iterator for the indexer
            </summary>
            <param name="node">Current node</param>
            <param name="i">Target index</param>
            <param name="l">Lower bound of indices in the subtree</param>
            <param name="r">Upper bound of indices in the subtree</param>
            <returns>The value with the given index</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.Contains(`0)">
            <summary>
            Procedure seeking for an element in the tree with the given value
            </summary>
            <param name="v">The value to be checked</param>
            <returns>true, if the value is in the tree; false, otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.Find(`0,`0@)">
            <summary>
            Get a reference to the object by its value
            </summary>
            <param name="v">The value to be found</param>
            <param name="res">Reference to the found object: the object itself if found, default value otherwise</param>
            <returns>true if the object has been found, false otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.Min">
            <summary>
            Take the minimal value in the tree
            </summary>
            <returns>The minmal value</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.Max">
            <summary>
            Take the maximal value in the tree
            </summary>
            <returns>The maximal value</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.Pop">
            <summary>
            Take the minimal value in the tree and remove it
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.Pop_Back">
            <summary>
            Take the maximal value in the tree and remove it
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.NextInternal(`0,`0@,AVLUtils.AVLTree{`0}.AVLBaseEnumerator)">
            <summary>
            Internal procedure for taking next/previous element after/before the given one (in linear or cyclic order)
            </summary>
            <param name="v">The given value</param>
            <param name="next">The next value</param>
            <param name="en">Enumerator that defines direction of the collection and its type</param>
            <returns></returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.Next(`0,`0@)">
            <summary>
            Take the value following after the given one
            </summary>
            <param name="v">The given value</param>
            <param name="next">The next value</param>
            <returns>true, if the next value is taken successfully; 
            false, otherwise (the given value is maximal)</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.CyclicNext(`0,`0@)">
            <summary>
            Take the value cyclicly following after the given one
            </summary>
            <param name="v">The given value</param>
            <param name="next">The next value</param>
            <returns>true, if the next value is taken successfully; 
            false, otherwise (the given value is maximal)</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.Prev(`0,`0@)">
            <summary>
            Take the value previous to the given one
            </summary>
            <param name="v">The given value</param>
            <param name="prev">The previous value</param>
            <returns>true, if the previous value is taken successfully; 
            false, otherwise (the given value is minimal)</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.CyclicPrev(`0,`0@)">
            <summary>
            Take the value cyclicly previous to the given one
            </summary>
            <param name="v">The given value</param>
            <param name="prev">The previous value</param>
            <returns>true, if the previous value is taken successfully; false, otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.ToList">
            <summary>
            Converts  the tree to a list of corresponding values according to the current tree structure
            </summary>
            <returns>The resultant list</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.Clear">
            <summary>
            Clearing the tree
            </summary>
        </member>
        <member name="P:AVLUtils.AVLTree`1.IsReadOnly">
            <summary>
            Read-only property (permanently false)
            </summary>
        </member>
        <member name="P:AVLUtils.AVLTree`1.Count">
            <summary>
            Number of elements in the tree
            </summary>
        </member>
        <member name="P:AVLUtils.AVLTree`1.comparer">
            <summary>
            Comparer defining the order in the tree
            </summary>
        </member>
        <member name="P:AVLUtils.AVLTree`1.IsEmpty">
            <summary>
            Gets a value indicating whether this tree is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AVLUtils.AVLTree`1.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i">Index</param>
            <returns>The value with the index i</returns>
        </member>
        <member name="T:AVLUtils.AVLTree`1.AVLNode">
            <summary>
            Class of the node of the tree
            </summary>
        </member>
        <member name="F:AVLUtils.AVLTree`1.AVLNode._val">
            <summary>
            The stored value
            </summary>
        </member>
        <member name="F:AVLUtils.AVLTree`1.AVLNode._left">
            <summary>
            The left child
            </summary>
        </member>
        <member name="F:AVLUtils.AVLTree`1.AVLNode._right">
            <summary>
            The right child
            </summary>
        </member>
        <member name="F:AVLUtils.AVLTree`1.AVLNode._balance">
            <summary>
            The balance between subtrees (the height of the right subtree minus the height of the left subtree)
            </summary>
        </member>
        <member name="F:AVLUtils.AVLTree`1.AVLNode._subtreeQnt">
            <summary>
            Number of data in the subtree of this node (including the data in the node)
            </summary>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLNode.#ctor(`0)">
            <summary>
            Constructor for the node, which takes the new value only
            </summary>
            <param name="newVal">The value to be stored</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLNode.SetQnt">
            <summary>
            Calculating the weight of the subtree
            </summary>
        </member>
        <member name="P:AVLUtils.AVLTree`1.AVLNode.val">
            <summary>
            Getting property of the stored value
            </summary>
        </member>
        <member name="P:AVLUtils.AVLTree`1.AVLNode.left">
            <summary>
            The property for the left child
            </summary>
        </member>
        <member name="P:AVLUtils.AVLTree`1.AVLNode.right">
            <summary>
            The property for the right child
            </summary>
        </member>
        <member name="P:AVLUtils.AVLTree`1.AVLNode.balance">
            <summary>
            The property for the balance
            </summary>
        </member>
        <member name="P:AVLUtils.AVLTree`1.AVLNode.subtreeQnt">
            <summary>
            Number of data in the subtree of this node (including the data in the node)
            </summary>
        </member>
        <member name="T:AVLUtils.AVLTree`1.AVLBaseEnumerator">
            <summary>
            The class basic for all enumerators used in the library
            </summary>
        </member>
        <member name="F:AVLUtils.AVLTree`1.AVLBaseEnumerator.state">
            <summary>
            Current state of the enumerator
            </summary>
        </member>
        <member name="F:AVLUtils.AVLTree`1.AVLBaseEnumerator.tree">
            <summary>
            Reference to the connected collection
            </summary>
        </member>
        <member name="F:AVLUtils.AVLTree`1.AVLBaseEnumerator.curNode">
            <summary>
            The current node of the iterator
            </summary>
        </member>
        <member name="F:AVLUtils.AVLTree`1.AVLBaseEnumerator.st">
            <summary>
            Path to the current node (keeping all nodes where we turned left, that is, nodes where to we can return)
            </summary>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLBaseEnumerator.#ctor(AVLUtils.AVLTree{`0})">
            <summary>
            Default constructor for the enumerator (set to the "beginning")
            </summary>
            <param name="newTree">The tree to be served</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLBaseEnumerator.Dispose">
            <summary>
            Dispose method (for the aim of compatability)
            </summary>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLBaseEnumerator.Reset">
            <summary>
            Setting up the enumerator
            </summary>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLBaseEnumerator.MoveNext">
            <summary>
            Step further
            </summary>
            <returns>true, if the iterator has been moved successfully; false, otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLBaseEnumerator.MoveNextBase">
            <summary>
            Internal realization of step further
            </summary>
            <returns>true, if the iterator has been moved successfully; false, otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLBaseEnumerator.MoveNextCyclic">
            <summary>
            Internal realization of cyclic step further (based on the regular step further procedure)
            </summary>
            <returns>true, if the iterator has been moved successfully; false, otherwise</returns>
        </member>
        <member name="P:AVLUtils.AVLTree`1.AVLBaseEnumerator.IsValid">
            <summary>
            Getting property showing whether the iterator has a valid value
            </summary>
        </member>
        <member name="P:AVLUtils.AVLTree`1.AVLBaseEnumerator.Current">
            <summary>
            Getting property of the current value
            </summary>
        </member>
        <member name="P:AVLUtils.AVLTree`1.AVLBaseEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Getting property of non-generic interface
            </summary>
        </member>
        <member name="T:AVLUtils.AVLTree`1.AVLBaseEnumerator.IteratorState">
            <summary>
            States of the enumerators
            </summary>
        </member>
        <member name="F:AVLUtils.AVLTree`1.AVLBaseEnumerator.IteratorState.Before">
            <summary>
            The enumerator is before the "beginning" of the collection (taking into account the direction of the enumerator);
            it is invalid here
            </summary>
        </member>
        <member name="F:AVLUtils.AVLTree`1.AVLBaseEnumerator.IteratorState.Inside">
            <summary>
            The enumerator is inside the collection and, therefore, valid
            </summary>
        </member>
        <member name="F:AVLUtils.AVLTree`1.AVLBaseEnumerator.IteratorState.After">
            <summary>
            The enumerator is after the "end" of the collection (taking into account the direction of the enumerator);
            it is invalid here
            </summary>
        </member>
        <member name="T:AVLUtils.AVLTree`1.AVLEnumerator">
            <summary>
            Class of a direct enumerator for an AVL tree
            </summary>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLEnumerator.#ctor(AVLUtils.AVLTree{`0})">
            <summary>
            Default constructor for the enumerator (set to the beginning of the tree)
            </summary>
            <param name="newTree">The tree to be served</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLEnumerator.#ctor(AVLUtils.AVLTree{`0},`0)">
            <summary>
            Constructor for the enumerator setting it to the given value or to the next one 
            if the given value is absent in the tree
            </summary>
            <param name="newTree">The tree to be served</param>
            <param name="v">The value to be set to</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLEnumerator.GoFarLeft">
            <summary>
            Subsidiary procedure goes from the current node to the left as far as possible 
            (keeping the track in the stack)
            </summary>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLEnumerator.MoveNextBase">
            <summary>
            Internal realization for step further
            </summary>
            <returns>true, if the iterator has been moved successfully; false, otherwise</returns>
        </member>
        <member name="T:AVLUtils.AVLTree`1.AVLReverseEnumerator">
            <summary>
            Class of a reverse enumerator for an AVL tree
            </summary>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLReverseEnumerator.#ctor(AVLUtils.AVLTree{`0})">
            <summary>
            Default constructor for the enumerator (set to the end of the tree)
            </summary>
            <param name="newTree">The tree to be served</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLReverseEnumerator.#ctor(AVLUtils.AVLTree{`0},`0)">
            <summary>
            Constructor for the enumerator setting it to the given value or to the prevoius one (in direct order)
            if the given value is absent in the tree
            </summary>
            <param name="newTree">The tree to be served</param>
            <param name="v">The value to be set to</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLReverseEnumerator.GoFarRight">
            <summary>
            Subsidiary procedure goes from the current node to the left as far as possible 
            (keeping the track in the stack)
            </summary>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLReverseEnumerator.MoveNextBase">
            <summary>
            Internal realiation for the step further (in reverse order)
            </summary>
            <returns>true, if the iterator has been moved successfully; false, otherwise</returns>
        </member>
        <member name="T:AVLUtils.AVLTree`1.AVLCyclicEnumerator">
            <summary>
            Class of a cyclic direct enumerator for an AVL tree
            </summary>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLCyclicEnumerator.#ctor(AVLUtils.AVLTree{`0})">
            <summary>
            Default constructor for the enumerator (set to the beginning of the tree)
            </summary>
            <param name="newTree">The tree to be served</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLCyclicEnumerator.#ctor(AVLUtils.AVLTree{`0},`0)">
            <summary>
            Constructor for the enumerator setting it to the given value or to the next one 
            if the given value is absent in the tree
            </summary>
            <param name="newTree">The tree to be served</param>
            <param name="v">The value to be set to</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLCyclicEnumerator.MoveNext">
            <summary>
            Cyclic step further
            </summary>
            <returns>true, if the iterator has been moved successfully; false, otherwise</returns>
        </member>
        <member name="T:AVLUtils.AVLTree`1.AVLCyclicReverseEnumerator">
            <summary>
            Class of a cyclic reverse enumerator for an AVL tree
            </summary>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLCyclicReverseEnumerator.#ctor(AVLUtils.AVLTree{`0})">
            <summary>
            Default constructor for the enumerator (set to the end of the tree)
            </summary>
            <param name="newTree">The tree to be served</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLCyclicReverseEnumerator.#ctor(AVLUtils.AVLTree{`0},`0)">
            <summary>
            Constructor for the enumerator setting it to the given value or to the previous one 
            if the given value is absent in the tree
            </summary>
            <param name="newTree">The tree to be served</param>
            <param name="v">The value to be set to</param>
        </member>
        <member name="M:AVLUtils.AVLTree`1.AVLCyclicReverseEnumerator.MoveNext">
            <summary>
            Cyclic step further
            </summary>
            <returns>true, if the iterator has been moved successfully; false, otherwise</returns>
        </member>
        <member name="T:AVLUtils.AVLBaseDictionary`3">
            <summary>
            Base class for all dictionary classes of the library
            </summary>
            <typeparam name="TKey">Type of the key of the dictionary</typeparam>
            <typeparam name="TValue">Type of data to be stored in the dictionary</typeparam>
            <typeparam name="TTree">The tree type on which the container is based</typeparam>
        </member>
        <member name="F:AVLUtils.AVLBaseDictionary`3._tree">
            <summary>
            The internal container
            </summary>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.GetAt(System.Int32)">
            <summary>
            Take a dictionary element by integer index
            </summary>
            <param name="i">The index</param>
            <returns>The key-value pair at the given index</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.GetEnumerator">
            <summary>
            Returns an enumerator that directly iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an untyped enumerator that directly iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.GetEnumerator(`0)">
            <summary>
            Returns an enumerator that iterates through the collection put at the given value or after it 
            (if there is no such a value in the collection)
            </summary>
            <param name="key">The key the enumerator to be put on</param>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.GetEnumerator(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Returns an enumerator that iterates through the collection put at the given value or after it 
            (if there is no such a value in the collection)
            </summary>
            <param name="pair">The pair the enumerator to be put on</param>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.GetReverseEnumerator">
            <summary>
            Returns an enumerator that reversely iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.GetReverseEnumerator(`0)">
            <summary>
            Returns an enumerator that reversely iterates through the collection put at the given value or before it 
            (if there is no such a value in the collection)
            </summary>
            <param name="key">The key the enumerator to be put on</param>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.GetReverseEnumerator(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Returns an enumerator that iterates reversely through the collection put at the given value or before it 
            (if there is no such a value in the collection)
            </summary>
            <param name="pair">The pair the enumerator to be put on</param>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.GetCyclicEnumerator">
            <summary>
            Returns an enumerator that directly iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.GetCyclicEnumerator(`0)">
            <summary>
            Returns a cyclic enumerator that iterates through the collection put at the given value or after it 
            (if there is no such a value in the collection)
            </summary>
            <param name="key">The key the enumerator to be put on</param>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.GetCyclicEnumerator(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Returns a cyclic enumerator that iterates through the collection put at the given value or after it 
            (if there is no such a value in the collection)
            </summary>
            <param name="pair">The pair the enumerator to be put on</param>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.GetCyclicReverseEnumerator">
            <summary>
            Returns a cyclic enumerator that reversely iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.GetCyclicReverseEnumerator(`0)">
            <summary>
            Returns a cyclic enumerator that reversely iterates through the collection put at the given value or before it 
            (if there is no such a value in the collection)
            </summary>
            <param name="key">The key the enumerator to be put on</param>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.GetCyclicReverseEnumerator(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Returns a cyclic enumerator that reversely iterates through the collection put at the given value or before it 
            (if there is no such a value in the collection)
            </summary>
            <param name="pair">The pair the enumerator to be put on</param>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            If there is an element with the given key in the dictionary, nothing changes
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary </param>
            <returns>true if the dictionary contains an element with the key; false otherwise. </returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.Remove(`0)">
            <summary>
            Remove the element with the given key from the dictionary
            </summary>
            <param name="key">The given key</param>
            <returns>true, if there was such an element and it has been removed successfully; false, otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the dictionary contains an element with the specified key; false, otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a pair key-value to the dictionary. If there is an element with the given key, nothing changes
            </summary>
            <param name="pair">The pair to be added</param>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.Clear">
            <summary>
            Removes all items from the dictionary
            </summary>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the dictionary contains a specific pair key-value
            </summary>
            <param name="pair">Pair to be checked</param>
            <returns>true if there is such a pair, false otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies pairs key-value from the dictionary to an array, starting at a particular index
            </summary>
            <param name="array">The one-dimensional array that is the destination of pairs copied from the dictionary. 
            The array must have zero-based indexing</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specific pair key-value from the dictionary
            </summary>
            <param name="pair">The pair to be removed</param>
            <returns>true if the pair has been removed, false otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.Min">
            <summary>
            Take the minimal pair key-value in the dictionary
            </summary>
            <returns>The minmal value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.MinKey">
            <summary>
            Take the minimal key in the dictionary
            </summary>
            <returns>The minmal value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.MinValue">
            <summary>
            Take the value with the minimal key in the dictionary
            </summary>
            <returns>The minmal value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.Max">
            <summary>
            Take the maximal pair key-value in the dictionary
            </summary>
            <returns>The minmal value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.MaxKey">
            <summary>
            Take the maximal key in the dictionary
            </summary>
            <returns>The minmal value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.MaxValue">
            <summary>
            Take the value with the maximal key in the dictionary
            </summary>
            <returns>The minmal value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.Pop">
            <summary>
            Remove and return the minimal pair key-value in the dictionary
            </summary>
            <returns>The minmal value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.PopKey">
            <summary>
            Remove and return the minimal key in the dictionary
            </summary>
            <returns>The minmal value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.PopValue">
            <summary>
            Remove and return the value with the minimal key in the dictionary
            </summary>
            <returns>The minmal value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.Pop_Back">
            <summary>
            Remove and return the maximal pair key-value in the dictionary
            </summary>
            <returns>The minmal value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.PopKey_Back">
            <summary>
            Remove and return the maximal key in the dictionary
            </summary>
            <returns>The minmal value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.PopValue_Back">
            <summary>
            Remove and return the value with the maximal key in the dictionary
            </summary>
            <returns>The minmal value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.Next(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Take the pair key-value following after the given pair (only the key is taken into account)
            </summary>
            <param name="pair">The given pair</param>
            <param name="nextPair">The next pair</param>
            <returns>true, if the next value is taken successfully; 
            false, otherwise (the given value is maximal)</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.CyclicNext(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Take the pair key-value following after the given pair in cyclic order (only the key is taken into account)
            </summary>
            <param name="pair">The given pair</param>
            <param name="nextPair">The next pair</param>
            <returns>true, if the next value is taken successfully; false, otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.Next(`0,System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Take the pair key-value following after the pair with given key 
            </summary>
            <param name="key">The given key</param>
            <param name="nextPair">The next pair</param>
            <returns>true, if the next value is taken successfully; 
            false, otherwise (the given value is maximal)</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.CyclicNext(`0,System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Take the pair key-value following after the pair with given key in the cyclic order
            </summary>
            <param name="key">The given key</param>
            <param name="nextPair">The next pair</param>
            <returns>true, if the next value is taken successfully; false, otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.Prev(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Take the pair key-value preceeding the given pair (only the key is taken into account)
            </summary>
            <param name="pair">The given pair</param>
            <param name="nextPair">The previous pair</param>
            <returns>true, if the previuos value is taken successfully; 
            false, otherwise (the given value is minimal)</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.CyclicPrev(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Take the pair key-value preceeding the given pair in the cyclic order (only the key is taken into account)
            </summary>
            <param name="pair">The given pair</param>
            <param name="nextPair">The previous pair</param>
            <returns>true, if the previuos value is taken successfully; false, otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.Prev(`0,System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Take the pair key-value preceeding the pair with given key 
            </summary>
            <param name="key">The given key</param>
            <param name="nextPair">The previous pair</param>
            <returns>true, if the previous value is taken successfully; 
            false, otherwise (the given value is minimal)</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.CyclicPrev(`0,System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Take the pair key-value preceeding the pair with given key in the cyclic order
            </summary>
            <param name="key">The given key</param>
            <param name="nextPair">The previous pair</param>
            <returns>true, if the previous value is taken successfully; false, otherwise</returns>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.comparer">
            <summary>
            Getting the key comparer
            </summary>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.Count">
            <summary>
            Number of elements in the tree
            </summary>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.IsReadOnly">
            <summary>
            Read-only property (permanently false)
            </summary>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.IsEmpty">
            <summary>
            Gets a value indicating whether this tree is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.Keys">
            <summary>
            Gets an ICollection object containing the keys of the dictionary.
            The order of keys is the same as in the dictionary
            </summary>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.Values">
            <summary>
            Gets an ICollection object containing the values of the dictionary.
            The order of values is the same as in the dictionary
            </summary>
        </member>
        <member name="T:AVLUtils.AVLBaseDictionary`3.MyComparer">
            <summary>
            Comparer for pairs that compares keys only
            </summary>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.MyComparer.#ctor">
            <summary>
            Default constructor that takes the default comparer of keys
            </summary>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.MyComparer.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructor for the pair comparer on the basis of key comparer
            </summary>
            <param name="newComp">The basic key comparer</param>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.MyComparer.Compare(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Compares two pairs and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="p1">The first pair</param>
            <param name="p2">The second pair</param>
            <returns>-1, if the first key is less than the second key; 0, if keys are equal; +1, otherwise</returns>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.MyComparer.keyComp">
            <summary>
            The reference to the key comparer
            </summary>
        </member>
        <member name="T:AVLUtils.AVLBaseDictionary`3.BasicKeyValueEnumerator`1">
            <summary>
            Class of the enumerator of a key collection
            </summary>
        </member>
        <member name="F:AVLUtils.AVLBaseDictionary`3.BasicKeyValueEnumerator`1._dictEnum">
            <summary>
            Internal reference to a parent dictionary enumerator
            </summary>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.BasicKeyValueEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Constructor of an enumerator that connects it to the parent dictionary
            </summary>
            <param name="en">Reference to the enumerator to be used</param>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.BasicKeyValueEnumerator`1.Dispose">
            <summary>
            Disposition of the enumertor
            </summary>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.BasicKeyValueEnumerator`1.MoveNext">
            <summary>
            Moving the enumerator
            </summary>
            <returns>true if the enumerator was moved, false otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.BasicKeyValueEnumerator`1.System#Collections#IEnumerator#Reset">
            <summary>
            Resetting the enumerator
            </summary>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.BasicKeyValueEnumerator`1.Current">
            <summary>
            Getting the current key
            </summary>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.BasicKeyValueEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Getting the current key
            </summary>
        </member>
        <member name="T:AVLUtils.AVLBaseDictionary`3.KeyCollection">
            <summary>
            Class of immutable collection of keys of a dictionary. The order of keys is the same as in the dictionary elements
            </summary>
        </member>
        <member name="F:AVLUtils.AVLBaseDictionary`3.KeyCollection._dict">
            <summary>
            Internal reference to the parent dictionary
            </summary>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.#ctor(AVLUtils.AVLBaseDictionary{`0,`1,`2})">
            <summary>
            Constructor that creates the key collection and connects it to the given dictionary
            </summary>
            <param name="newDict">The dictionary to which the created collection should be connected</param>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.GetEnumerator">
            <summary>
            Getting enumerator for key collection
            </summary>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Getting enumerator for key collection
            </summary>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.GetEnumerator(`0)">
            <summary>
            Getting enumerator for key collection set to the given value (or after it) 
            </summary>
            <param name="key">The key to which or after which the enumerator should be put</param>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.GetCyclicEnumerator">
            <summary>
            Getting enumerator for key collection
            </summary>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.GetCyclicEnumerator(`0)">
            <summary>
            Getting enumerator for key collection set to the given value (or after it) regarding it as a cyclic container
            </summary>
            <param name="key">The key to which or after which the enumerator should be put</param>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.GetReverseEnumerator">
            <summary>
            Getting reverse enumerator for key collection
            </summary>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.GetReverseEnumerator(`0)">
            <summary>
            Getting reverse enumerator for key collection set to the given value (or before it)
            </summary>
            <param name="key">The key to which or after which the enumerator should be put</param>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.GetCyclicReverseEnumerator">
            <summary>
            Getting reverse enumerator for key collection
            </summary>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.GetCyclicReverseEnumerator(`0)">
            <summary>
            Getting reverse enumerator for key collection set to the given value (or before it) regarding it as a cyclic container
            </summary>
            <param name="key">The key to which or after which the enumerator should be put</param>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing</param>
            <param name="index">The zero-based index in array at which copying begins</param>            
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
            <summary>
            A stub for Add method
            </summary>
            <param name="item">The item to be added</param>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
            <summary>
            A stub for Clear method
            </summary>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
            <summary>
            Checking presence of a key in the collection
            </summary>
            <param name="item">The to be checked</param>
            <returns>true if the key is present, false otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
            <summary>
            A stub for Remove method
            </summary>
            <param name="item">The item to be removed</param>
            <returns>Actually, no return value</returns>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.KeyCollection.Count">
            <summary>
            Getting number of keys in the collection
            </summary>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
            <summary>
            Getting read-only flag (constantly true)
            </summary>
        </member>
        <member name="T:AVLUtils.AVLBaseDictionary`3.KeyCollection.KeyEnumerator">
            <summary>
            Class of key enumerator
            </summary>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.KeyCollection.KeyEnumerator.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            COnstructor that takes an enumerator in the parent dictionary
            </summary>
            <param name="en">An enumerator in the parent dictionary</param>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.KeyCollection.KeyEnumerator.Current">
            <summary>
            Getting key of the current pair in the dictionary
            </summary>
        </member>
        <member name="T:AVLUtils.AVLBaseDictionary`3.ValueCollection">
            <summary>
            Class of immutable collection of values of a dictionary. The order of values is the same as in the dictionary elements
            </summary>
        </member>
        <member name="F:AVLUtils.AVLBaseDictionary`3.ValueCollection._dict">
            <summary>
            Internal reference to the parent dictionary
            </summary>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.#ctor(AVLUtils.AVLBaseDictionary{`0,`1,`2})">
            <summary>
            Constructor that creates the value collection and connects it to the given dictionary
            </summary>
            <param name="newDict">The dictionary to which the created collection should be connected</param>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.GetEnumerator">
            <summary>
            Getting enumerator for value collection
            </summary>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Getting enumerator for value collection
            </summary>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.GetEnumerator(`1)">
            <summary>
            Getting enumerator for value collection set to the given value (or after it).
            Not realized because the collection is unordered
            </summary>
            <param name="val">The val to which or after which the enumerator should be put</param>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.GetCyclicEnumerator">
            <summary>
            Getting enumerator for value collection
            </summary>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.GetCyclicEnumerator(`1)">
            <summary>
            Getting enumerator for value collection set to the given value (or after it) regarding it as a cyclic container
            Not realized because the collection is unordered
            </summary>
            <param name="val">The val to which or after which the enumerator should be put</param>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.GetReverseEnumerator">
            <summary>
            Getting reverse enumerator for value collection
            </summary>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.GetReverseEnumerator(`1)">
            <summary>
            Getting reverse enumerator for value collection set to the given value (or before it)
            Not realized because the collection is unordered
            </summary>
            <param name="val">The val to which or after which the enumerator should be put</param>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.GetCyclicReverseEnumerator">
            <summary>
            Getting reverse enumerator for value collection
            </summary>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.GetCyclicReverseEnumerator(`1)">
            <summary>
            Getting reverse enumerator for value collection set to the given value (or before it) regarding it as a cyclic container
            Not realized because the collection is unordered
            </summary>
            <param name="val">The val to which or after which the enumerator should be put</param>
            <returns>An enumerator to access the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing</param>
            <param name="index">The zero-based index in array at which copying begins</param>            
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
            <summary>
            A stub for Add method
            </summary>
            <param name="item">The item to be added</param>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
            <summary>
            A stub for Clear method
            </summary>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
            <summary>
            Checking presence of a value in the collection
            </summary>
            <param name="item">The to be checked</param>
            <returns>true if the value is present, false otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
            <summary>
            A stub for Remove method
            </summary>
            <param name="item">The item to be removed</param>
            <returns>Actually, no return value</returns>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.ValueCollection.Count">
            <summary>
            Getting number of values in the collection
            </summary>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
            <summary>
            Getting read-only flag (constantly true)
            </summary>
        </member>
        <member name="T:AVLUtils.AVLBaseDictionary`3.ValueCollection.ValueEnumerator">
            <summary>
            Class of value enumerator
            </summary>
        </member>
        <member name="M:AVLUtils.AVLBaseDictionary`3.ValueCollection.ValueEnumerator.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Constructor that takes an enumerator in the parent dictionary
            </summary>
            <param name="en">An enumerator in the parent dictionary</param>
        </member>
        <member name="P:AVLUtils.AVLBaseDictionary`3.ValueCollection.ValueEnumerator.Current">
            <summary>
            Getting value of the current pair in the dictionary
            </summary>
        </member>
        <member name="T:AVLUtils.AVLDictionary`2">
            <summary>
            Class of dictionary 
            </summary>
            <typeparam name="TKey">Type of keys</typeparam>
            <typeparam name="TValue">Type of values</typeparam>
        </member>
        <member name="M:AVLUtils.AVLDictionary`2.#ctor">
            <summary>
            Default constructor that use the default key order
            </summary>
        </member>
        <member name="M:AVLUtils.AVLDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructor that use the key order given by user
            </summary>
        </member>
        <member name="T:AVLUtils.AVLDictionaryUnsafe`2">
            <summary>
            Class of dictionary that can change the comparer during work
            </summary>
            <typeparam name="TKey">Type of keys</typeparam>
            <typeparam name="TValue">Type of values</typeparam>
        </member>
        <member name="T:AVLUtils.IUnsafeContainer`1">
            <summary>
            Interface introducing methods for a sorted container with changeable comparer
            </summary>
            <typeparam name="T">The type of the stored objects</typeparam>
        </member>
        <member name="M:AVLUtils.IUnsafeContainer`1.CheckConsistency">
            <summary>
            Checks cosistency of the current structure of the tree
            </summary>
            <returns>true, if the order</returns>
        </member>
        <member name="M:AVLUtils.IUnsafeContainer`1.Rebuild">
            <summary>
            Rebuild the tree according to the current comparer
            </summary>
        </member>
        <member name="M:AVLUtils.IUnsafeContainer`1.SetComparer(System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            Set a new comparer for the tree. It can be unsafe. 
            In the debug version the consistency is checked
            after setting a new comparer; if it is violated, an exception is raised.
            In release version, a flag is taken into account that shows whether to check
            the consistency.
            </summary>
            <param name="newComp">The new comparer to be set</param>
            <param name="checkAfter">Flag showing whether to check the consistency of the tree
            with the new comparer (in release mode only!)</param>
        </member>
        <member name="M:AVLUtils.AVLDictionaryUnsafe`2.#ctor">
            <summary>
            Default constructor that use the default key order
            </summary>
        </member>
        <member name="M:AVLUtils.AVLDictionaryUnsafe`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructor that use the key order given by user
            </summary>
        </member>
        <member name="M:AVLUtils.AVLDictionaryUnsafe`2.CheckConsistency">
            <summary>
            Checks cosistency of the current structure of the tree
            </summary>
            <returns>true, if the order</returns>
        </member>
        <member name="M:AVLUtils.AVLDictionaryUnsafe`2.Rebuild">
            <summary>
            Rebuild the tree according to the current comparer
            </summary>
        </member>
        <member name="M:AVLUtils.AVLDictionaryUnsafe`2.SetComparer(System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            Set a new comparer for the tree. It can be unsafe. 
            In the debug version the consistency is checked
            after setting a new comparer; if it is violated, an exception is raised.
            In release version, a flag is taken into account that shows whether to check
            the consistency.
            </summary>
            <param name="newComp">The new comparer to be set</param>
            <param name="checkAfter">Flag showing whether to check the consistency of the tree
            with the new comparer (in release mode only!)</param>
        </member>
        <member name="T:AVLUtils.AVLBaseSet`2">
            <summary>
            Basic class for all set classes of the library
            </summary>
            <typeparam name="TValue">Type of data to be stored in the container</typeparam>
            <typeparam name="TTree">The tree type on which the containre is based</typeparam>
        </member>
        <member name="F:AVLUtils.AVLBaseSet`2._tree">
            <summary>
            The internal container
            </summary>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.GetEnumerator">
            <summary>
            Returns an enumerator that directly iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an untyped enumerator that directly iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.GetEnumerator(`0)">
            <summary>
            Returns an enumerator that iterates through the collection put at the given value or after it 
            (if there is no such a value in the collection)
            </summary>
            <param name="v">The value the enymerator to be put on</param>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.GetReverseEnumerator">
            <summary>
            Returns an enumerator that reversely iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.GetReverseEnumerator(`0)">
            <summary>
            Returns an enumerator that reversely iterates through the collection put at the given value or before it 
            (if there is no such a value in the collection)
            </summary>
            <param name="v">The value the enymerator to be put on</param>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.GetCyclicEnumerator">
            <summary>
            Returns an enumerator that directly iterates through the collection regarding it as a cycled one
            </summary>
            <returns>An enumerator that directly iterates through the collection regarding it as a cycled one</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.GetCyclicEnumerator(`0)">
            <summary>
            Returns an enumerator that directly iterates through the collection regarding it as a cycled one;
            initially the enumerator is put to the given value or (if it is absent) to minimal value cyclicly 
            greater than the given one
            </summary>
            <param name="v">The value the enymerator to be put on</param>
            <returns>An enumerator that directly iterates through the collection regarding it as a cycled one</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.GetCyclicReverseEnumerator">
            <summary>
            Returns an enumerator that reversely iterates through the collection regarding it as a cycled one
            </summary>
            <returns>An enumerator that reversely iterates through the collection regarding it as a cycled one</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.GetCyclicReverseEnumerator(`0)">
            <summary>
            Returns an enumerator that reversely iterates through the collection regarding it as a cycled one;
            initially the enumerator is put to the given value or (if it is absent) to maximal value cyclicly 
            less than the given one
            </summary>
            <param name="v">The value the enymerator to be put on</param>
            <returns>An enumerator that iterates reversely through the collection regarding it as a cycled one</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.System#Collections#Generic#ICollection{TValue}#Add(`0)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="v">The value to be added</param>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adding a collection to the tree
            </summary>
            <param name="other">The collection to be added</param>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.Clear">
            <summary>
            Removes all items from the collection
            </summary>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.Contains(`0)">
            <summary>
            Determines whether the collection contains a specific value
            </summary>
            <param name="v">The object to locate in the collection</param>
            <returns>true if item is found in the collection; otherwise, false</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection
            </summary>
            <param name="v">The value to be removed form the collection</param>
            <returns>true if item was successfully removed from the collection; otherwise, false. 
            This method also returns false if item is not found in the collection</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.Add(`0)">
            <summary>
            Adds an element to the current set and returns a valu e to indicate if the element was successfully added.
            </summary>
            <param name="v">The element to add to the set.</param>
            <returns>true if the element is added to the set; false if the element is already in the set. </returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all elements in the specified collection from the current set.
            </summary>
            <param name="other">The collection of items to remove from the set.</param>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains only elements that are also in a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a proper (strict) subset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>true if the current set is a proper subset of other; otherwise, false.</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a proper (strict) superset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>true if the current set is a proper superset of other; otherwise, false.</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a set is a subset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>true if the current set is a subset of other; otherwise, false. </returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a set is a subset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>true if the current set is a superset of other; otherwise, false. </returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set overlaps with the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>true if the current set and other share at least one common element; otherwise, false. </returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set and the specified collection contain the same elements.
            This method ignores the order of elements and any duplicate elements in other.
            </summary>
            <param name="other">The collection to be compared with the current set</param>
            <returns>true if the current set is equal to the given; otherwise, false.</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains only elements that are present 
            either in the current set or in the specified collection, but not both.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains all elements that are present in the current set, 
            in the specified collection, or in both.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.Min">
            <summary>
            Take the minimal value in the tree
            </summary>
            <returns>The minmal value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.Max">
            <summary>
            Take the maximal value in the tree
            </summary>
            <returns>The maximal value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.Pop">
            <summary>
            Take the minimal value in the tree and remove it
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.Pop_Back">
            <summary>
            Take the maximal value in the tree and remove it
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.Next(`0,`0@)">
            <summary>
            Take the value following after the given one
            </summary>
            <param name="v">The given value</param>
            <param name="next">The next value</param>
            <returns>true, if the next value is taken successfully; 
            false, otherwise (the given value is maximal)</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.CyclicNext(`0,`0@)">
            <summary>
            Take the value following after the given one in the cyclic order
            </summary>
            <param name="v">The given value</param>
            <param name="next">The next value</param>
            <returns>true, if the next value is taken successfully; false, otherwise</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.Prev(`0,`0@)">
            <summary>
            Take the value previous to the given one
            </summary>
            <param name="v">The given value</param>
            <param name="prev">The previous value</param>
            <returns>true, if the previous value is taken successfully; 
            false, otherwise (the given value is minimal)</returns>
        </member>
        <member name="M:AVLUtils.AVLBaseSet`2.CyclicPrev(`0,`0@)">
            <summary>
            Take the value previous to the given one in the cyclic order
            </summary>
            <param name="v">The given value</param>
            <param name="prev">The previous value</param>
            <returns>true, if the previous value is taken successfully; false, otherwise</returns>
        </member>
        <member name="P:AVLUtils.AVLBaseSet`2.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i">Index</param>
            <returns>The value with the index i</returns>
        </member>
        <member name="P:AVLUtils.AVLBaseSet`2.comparer">
            <summary>
            Getting the set comparer
            </summary>
        </member>
        <member name="P:AVLUtils.AVLBaseSet`2.IsReadOnly">
            <summary>
            Read-only property (permanently false)
            </summary>
        </member>
        <member name="P:AVLUtils.AVLBaseSet`2.Count">
            <summary>
            Number of elements in the tree
            </summary>
        </member>
        <member name="T:AVLUtils.AVLSet`1">
            <summary>
            Simple set class on the basis of AVL-tree
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:AVLUtils.AVLSet`1.#ctor">
            <summary>
            Default constructor that involves the default order
            </summary>
        </member>
        <member name="M:AVLUtils.AVLSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructor that involves the given order
            </summary>
        </member>
        <member name="T:AVLUtils.AVLSetUnsafe`1">
            <summary>
            Class of set with changeable comparer on the basis of AVL-tree
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:AVLUtils.AVLSetUnsafe`1.#ctor">
            <summary>
            Default constructor that involves the default order
            </summary>
        </member>
        <member name="M:AVLUtils.AVLSetUnsafe`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructor that involves the given order
            </summary>
        </member>
        <member name="M:AVLUtils.AVLSetUnsafe`1.CheckConsistency">
            <summary>
            Checks cosistency of the current structure of the tree
            </summary>
            <returns>true, if the order</returns>
        </member>
        <member name="M:AVLUtils.AVLSetUnsafe`1.Rebuild">
            <summary>
            Rebuild the tree according to the current comparer
            </summary>
        </member>
        <member name="M:AVLUtils.AVLSetUnsafe`1.SetComparer(System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            Set a new comparer for the tree. It can be unsafe. 
            In the debug version the consistency is checked
            after setting a new comparer; if it is violated, an exception is raised.
            In release version, a flag is taken into account that shows whether to check
            the consistency.
            </summary>
            <param name="newComp">The new comparer to be set</param>
            <param name="checkAfter">Flag showing whether to check the consistency of the tree
            with the new comparer (in release mode only!)</param>
        </member>
        <member name="T:AVLUtils.AVLTreeUnsafe`1">
            <summary>
            A class of non-cyclic AVL tree, which allows to change comparer during life of the object.
            Consistency of the data structure should be provided by the user !
            There is a method which checks the consistency with the current comparer
            </summary>
            <typeparam name="TValue">The type of the elements of the tree</typeparam>
        </member>
        <member name="M:AVLUtils.AVLTreeUnsafe`1.CheckConsistency">
            <summary>
            Checks cosistency of the current structure of the tree
            </summary>
            <returns>true, if the order</returns>
        </member>
        <member name="M:AVLUtils.AVLTreeUnsafe`1.Rebuild">
            <summary>
            Rebuild the tree according to the current comparer
            </summary>
        </member>
        <member name="M:AVLUtils.AVLTreeUnsafe`1.SetComparer(System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            Set a new comparer for the tree. It can be unsafe. 
            In the debug version the consistency is checked
            after setting a new comparer; if it is violated, an exception is raised.
            In release version, a flag is taken into account that shows whether to check
            the consistency.
            </summary>
            <param name="newComp">The new comparer to be set</param>
            <param name="checkAfter">Flag showing whether to check the consistency of the tree
            with the new comparer (in release mode only!)</param>
        </member>
        <member name="M:AVLUtils.AVLTreeUnsafe`1.#ctor">
            <summary>
            Default constructor with default order in the tree
            </summary>
        </member>
        <member name="M:AVLUtils.AVLTreeUnsafe`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructor that sets given order in the tree
            </summary>
            <param name="newComp">The comparer that defines the oreder in the tree</param>
        </member>
    </members>
</doc>
